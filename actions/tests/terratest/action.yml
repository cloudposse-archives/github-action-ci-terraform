name: 'ci-terraform-terratest'
description: 'Run terratest tests'
inputs:
  token:
    description: "github token"
    required: true
  test-name:
    description: "name of the github action status check that will be calling this action as a step"
    required: true
  sha:
    description: "SHA hash of the commit whose status will be modified"
    required: true
  base-ref:
    description: "Name of the branch into which this PR wants to merge"
    required: true
  labels:
    description: "Labels on this PR, including associated metadata"
    required: true
  AWS_ACCESS_KEY_ID:
    required: true
  AWS_SECRET_ACCESS_KEY:
    required: true
  CLOUDFLARE_EMAIL:
    required: false
    default: ""
  CLOUDFLARE_API_KEY:
    required: false
    default: ""
  DD_API_KEY:
    required: false
    default: ""
  DD_APP_KEY:
    required: false
    default: ""
  OPSGENIE_API_KEY:
    required: false
    default: ""
  SPOTINST_ACCOUNT:
    required: false
    default: ""
  SPOTINST_TOKEN:
    required: false
    default: ""
  TFE_TOKEN:
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: "Rearrange test files (only executes on cloudposse/github-action-ci-terraform repository)"
      if: github.repository == 'cloudposse/github-action-ci-terraform'
      shell: bash
      run: |
        mv ./test/examples .

    - name: "Determine required Terraform version"
      uses: cloudposse/github-action-ci-terraform/actions/utilities/determine-terraform-version@javascript-reorganization
      with:
        base-ref: ${{ inputs.base-ref }}
        labels: ${{ inputs.labels }}

    - name: "Inject secrets"
      shell: bash
      run: |
        #!/bin/bash
        if [[ "$USES_AWS" == "true" || "$USES_DATADOG" == "true" || "$USES_SPOTINST" == "true" ]]; then
          printf "%s=%s\n"  AWS_ACCESS_KEY_ID      "$AWS_ACCESS_KEY_ID"      >> "$GITHUB_ENV"
          printf "%s=%s\n"  AWS_SECRET_ACCESS_KEY  "$AWS_SECRET_ACCESS_KEY"  >> "$GITHUB_ENV"
          echo exported AWS
        fi;
        if [[ "$USES_DATADOG" == "true" ]]; then
          printf "%s=%s\n"  DD_API_KEY "$DD_API_KEY" >> "$GITHUB_ENV"
          printf "%s=%s\n"  DD_APP_KEY "$DD_APP_KEY" >> "$GITHUB_ENV"
          echo exported Datadog
        fi;
        if [[ "$USES_GITHUB" == "true" ]]; then
          printf "%s=%s\n"  GITHUB_TOKEN     "$GITHUB_TOKEN"     >> "$GITHUB_ENV"
          echo exported GitHub
        fi;
        if [[ "$USES_OPSGENIE" == "true" ]]; then
          printf "%s=%s\n"  OPSGENIE_API_KEY "$OPSGENIE_API_KEY" >> "$GITHUB_ENV"
          echo exported Opsgenie
        fi;
        if [[ "$USES_SPOTINST" == "true" ]]; then
          printf "%s=%s\n"  SPOTINST_TOKEN   "$SPOTINST_TOKEN"   >> "$GITHUB_ENV"
          printf "%s=%s\n"  SPOTINST_ACCOUNT "$SPOTINST_ACCOUNT" >> "$GITHUB_ENV"
          echo exported Spotinst
        fi;
        if [[ "$USES_TFE" == "true" ]]; then
          printf "%s=%s\n"  TFE_TOKEN   "$TFE_TOKEN"   >> "$GITHUB_ENV"
          echo exported Terraform Cloud
        fi;
        if [[ "$USES_CLOUDFLARE" == "true" ]]; then
          printf "%s=%s\n"  CLOUDFLARE_EMAIL   "$CLOUDFLARE_EMAIL"   >> "$GITHUB_ENV"
          printf "%s=%s\n"  CLOUDFLARE_API_KEY "$CLOUDFLARE_API_KEY" >> "$GITHUB_ENV"
          echo exported CloudFlare
        fi;
      env:
        USES_GITHUB:   >-
          ${{ contains(github.repository, '-github-')
          || contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-github-provider') }}
        USES_OPSGENIE: >-
          ${{ contains(github.repository, 'terraform-opsgenie-')
          || contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-opsgenie-provider') }}
        USES_AWS: >-
         ${{ contains(github.repository, 'terraform-aws-')
          || contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-aws-provider')
          || contains(github.repository, 'action-test')
          || contains(github.repository, 'github-action-ci-terraform') }}
        USES_SPOTINST: >-
          ${{ contains(github.repository, '-spotinst-')
          || contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-spotinst-provider') }}
        USES_DATADOG: >-
          ${{ contains(github.repository, '-datadog-')
          ||  contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-datadog-provider') }}
        USES_TFE: >-
          ${{ contains(github.repository, '-tfe-')
          ||  contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-tfe-provider') }}
        USES_CLOUDFLARE: >-
          ${{ contains(github.repository, '-cloudflare-')
          ||  contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-cloudflare-provider') }}
        AWS_ACCESS_KEY_ID:     ${{ inputs.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
        GITHUB_TOKEN:          ${{ inputs.token }}
        OPSGENIE_API_KEY:      ${{ inputs.OPSGENIE_API_KEY }}
        DD_API_KEY:            ${{ inputs.DD_API_KEY }}
        DD_APP_KEY:            ${{ inputs.DD_APP_KEY }}
        SPOTINST_TOKEN:        ${{ inputs.SPOTINST_TOKEN }}
        SPOTINST_ACCOUNT:      ${{ inputs.SPOTINST_ACCOUNT }}
        TFE_TOKEN:             ${{ inputs.TFE_TOKEN }}
        CLOUDFLARE_EMAIL:      ${{ inputs.CLOUDFLARE_EMAIL }}
        CLOUDFLARE_API_KEY:    ${{ inputs.CLOUDFLARE_API_KEY }}

    - name: "Execute Terratest functionality"
      uses: cloudposse/github-action-ci-terraform/actions/utilities/execute-terratest@javascript-reorganization

    - name: "Restore test files to original location (only executes on cloudposse/github-action-ci-terraform repository)"
      if: github.repository == 'cloudposse/github-action-ci-terraform'
      shell: bash
      run: |
        mv ./examples ./test

    - name: "Record status"
      if: always()
      uses: cloudposse/github-action-ci-terraform/actions/status@javascript-reorganization
      with:
        token: ${{ inputs.token }}
        test-name: ${{ inputs.test-name }}
        sha: ${{ inputs.sha }}
        status: ${{ github.action_status }}
