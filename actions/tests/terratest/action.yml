name: 'terraform-ci-terratest'
description: 'Run terratest tests'
inputs:
  token:
    description: "github token"
    required: true
  test-name:
    description: "name of the github action status check that will be calling this action as a step"
    required: true
  sha:
    description: "SHA hash of the commit whose status will be modified"
    required: true
  base-ref:
    description: "Name of the branch into which this PR wants to merge"
    required: true
  labels:
    description: "Labels on this PR, including associated metadata"
    required: true
  AWS_ACCESS_KEY_ID:
    required: true
  AWS_SECRET_ACCESS_KEY:
    required: true
  CLOUDFLARE_EMAIL:
    required: false
    default: ""
  CLOUDFLARE_API_KEY:
    required: false
    default: ""
  DD_API_KEY:
    required: false
    default: ""
  DD_APP_KEY:
    required: false
    default: ""
  OPSGENIE_API_KEY:
    required: false
    default: ""
  SPOTINST_ACCOUNT:
    required: false
    default: ""
  SPOTINST_TOKEN:
    required: false
    default: ""
  TFE_TOKEN:
    required: false
    default: ""
runs:
  using: "composite"
  steps:
    - name: "Output script for `Determine required terraform version` step"
      shell: bash -x -e -o pipefail {0}
      run: |
        cat << "EOF" > determine_required_terraform_version.sh
        #!/bin/bash
        # Some legacy support is on 0.11 branches and we determine the Terraform version based on the target branch name
        VERSION=$(cut -d/ -f1 <<<${BASE_REF})
        if [[ ${VERSION} != '0.11' ]]; then
          TF012=0.12.31
          TF013=$(terraform-0.13 version --json | jq -r .terraform_version)
          TF014=$(terraform-0.14 version --json | jq -r .terraform_version)
          TF015=$(terraform-0.15 version --json | jq -r .terraform_version)
          TF1=$(terraform-1 version --json | jq -r .terraform_version)
          # vert exits non-zero if any of the versions are not acceptable, so `|| [[ -n "$VERSION" ]]` for a real error check
          FULL_VERSION=$(vert -s "$(terraform-config-inspect --json . | jq -r '.required_core[]')" "$TF012" "$TF013" "$TF014" "$TF015" "$TF1" | head -1) || [[ -n "$VERSION" ]]
          VERSION=${FULL_VERSION:0:4}
          echo Full version to use is ${FULL_VERSION}, setting VERSION to ${VERSION}
        fi

        # Match lables like `terraform/0.12` or nothing (to prevent non-zero exit code).
        # Use [0-9] because \d is not standard part of egrep
        OVERRIDE_VERSION=$(grep -Eo '(terraform/[0-9]+\.[x0-9]+|)' <<<${LABELS} | cut -d/ -f2)
        if [ -n "${OVERRIDE_VERSION}" ]; then
          VERSION=${OVERRIDE_VERSION}
          echo "Terraform ${VERSION} is required based on labels..."
        else
          echo "Terraform ${VERSION} is required for ${BASE_REF}..."
        fi

        [[ $VERSION =~ ^1\. ]] && VERSION=1

        # Last ditch effort, set a default
        if [ -z "${VERSION}" ]; then
          VERSION=1
        fi

        # Set final path to Terraform binary and confirm its existence
        PATH_TO_TERRAFORM="/usr/local/terraform/${VERSION}/bin"
        if [ -x "${PATH_TO_TERRAFORM}/terraform" ]; then
          echo "${PATH_TO_TERRAFORM}" >> "$GITHUB_PATH"
        else
          echo "Unable to locate executable for terraform ${VERSION}" >&2
          exit 1
        fi

        # Output VERSION for use in later steps
        printf "%s=%s\n"  VERSION   "$VERSION"   >> "$GITHUB_ENV"

        EOF
        chmod a+x determine_required_terraform_version.sh

    - name: "Determine required Terraform version"
      uses: docker://cloudposse/test-harness:latest
      env:
        BASE_REF: ${{ inputs.base-ref }}
        LABELS: ${{ join(inputs.labels.*.name, '\n') }}
      with:
        entrypoint: "/github/workspace/determine_required_terraform_version.sh"

    - name: "Output script for `Inject secrets` step"
      shell: bash -x -e -o pipefail {0}
      run: |
        cat << "EOF" > inject_secrets.sh
        #!/bin/bash

        if [[ "$USES_AWS" == "true" || "$USES_DATADOG" == "true" || "$USES_SPOTINST" == "true" ]]; then
          printf "%s=%s\n"  AWS_ACCESS_KEY_ID      "$AWS_ACCESS_KEY_ID"      >> "$GITHUB_ENV"
          printf "%s=%s\n"  AWS_SECRET_ACCESS_KEY  "$AWS_SECRET_ACCESS_KEY"  >> "$GITHUB_ENV"
          echo exported AWS
        fi;
        if [[ "$USES_DATADOG" == "true" ]]; then
          printf "%s=%s\n"  DD_API_KEY "$DD_API_KEY" >> "$GITHUB_ENV"
          printf "%s=%s\n"  DD_APP_KEY "$DD_APP_KEY" >> "$GITHUB_ENV"
          echo exported Datadog
        fi;
        if [[ "$USES_GITHUB" == "true" ]]; then
          printf "%s=%s\n"  GITHUB_TOKEN     "$GITHUB_TOKEN"     >> "$GITHUB_ENV"
          echo exported GitHub
        fi;
        if [[ "$USES_OPSGENIE" == "true" ]]; then
          printf "%s=%s\n"  OPSGENIE_API_KEY "$OPSGENIE_API_KEY" >> "$GITHUB_ENV"
          echo exported Opsgenie
        fi;
        if [[ "$USES_SPOTINST" == "true" ]]; then
          printf "%s=%s\n"  SPOTINST_TOKEN   "$SPOTINST_TOKEN"   >> "$GITHUB_ENV"
          printf "%s=%s\n"  SPOTINST_ACCOUNT "$SPOTINST_ACCOUNT" >> "$GITHUB_ENV"
          echo exported Spotinst
        fi;
        if [[ "$USES_TFE" == "true" ]]; then
          printf "%s=%s\n"  TFE_TOKEN   "$TFE_TOKEN"   >> "$GITHUB_ENV"
          echo exported Terraform Cloud
        fi;
        if [[ "$USES_CLOUDFLARE" == "true" ]]; then
          printf "%s=%s\n"  CLOUDFLARE_EMAIL   "$CLOUDFLARE_EMAIL"   >> "$GITHUB_ENV"
          printf "%s=%s\n"  CLOUDFLARE_API_KEY "$CLOUDFLARE_API_KEY" >> "$GITHUB_ENV"
          echo exported CloudFlare
        fi;
        EOF
        chmod a+x inject_secrets.sh

    - name: "Inject secrets"
      uses: docker://cloudposse/test-harness:latest
      env:
        USES_GITHUB:   >-
          ${{ contains(github.event.client_payload.github.payload.repository.name, '-github-')
          || contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-github-provider') }}
        USES_OPSGENIE: >-
          ${{ contains(github.event.client_payload.github.payload.repository.name, 'terraform-opsgenie-')
          || contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-opsgenie-provider') }}
        USES_AWS: >-
          ${{ contains(github.event.client_payload.github.payload.repository.name, 'terraform-aws-')
          || contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-aws-provider')
          || contains(github.event.client_payload.github.payload.repository.name, 'action-test') }}
        USES_SPOTINST: >-
          ${{ contains(github.event.client_payload.github.payload.repository.name, '-spotinst-')
          || contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-spotinst-provider') }}
        USES_DATADOG: >-
          ${{ contains(github.event.client_payload.github.payload.repository.name, '-datadog-')
          ||  contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-datadog-provider') }}
        USES_TFE: >-
          ${{ contains(github.event.client_payload.github.payload.repository.name, '-tfe-')
          ||  contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-tfe-provider') }}
        USES_CLOUDFLARE: >-
          ${{ contains(github.event.client_payload.github.payload.repository.name, '-cloudflare-')
          ||  contains(github.event.client_payload.pull_request.labels.*.name, 'terraform-cloudflare-provider') }}
      with:
        entrypoint: "/github/workspace/inject_secrets.sh"

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: "Output script for `Execute terratest functionality` step"
      shell: bash -x -e -o pipefail {0}
      run: |
        cat << "EOF" > terratest.sh
        #!/bin/bash
        # Initialize the terratest go project
        make -C test/src clean init
        rm -rf examples/*/.terraform examples/*/.terraform.lock.hcl
        # Test `examples/complete` with terratest
        make -C test/src
        EOF
        chmod a+x terratest.sh

    # Execute terratest
    - name: "Execute terratest functionality"
      uses: docker://cloudposse/test-harness:latest
      with:
        entrypoint: "/github/workspace/terratest.sh"

    - name: "Record status"
      if: always()
      uses: cloudposse/github-action-terraform-ci/actions/status@main
      with:
        token: ${{ inputs.token }}
        test-name: ${{ inputs.test-name }}
        sha: ${{ inputs.sha }}
        status: ${{ github.action_status }}
