name: 'terraform-ci-metadata'
description: 'Extract necessary metadata for /test and /run execution'
outputs:
  pr-sha:
    description: "The SHA of the commit at the head of the PR"
    value: ${{ steps.metadata.outputs.pr-sha }}
  pr-base-ref:
    description: "The name of the base branch that's being merged into"
    value: ${{ steps.metadata.outputs.pr-base-ref }}
  pr-labels:
    description: "The labels attached to this PR"
    value: ${{ steps.metadata.outputs.pr-labels }}
  valid-test-request:
    description: "Boolean string. Indicating whether the calling event was a proper /test request."
    value: ${{ steps.metadata.outputs.valid-test-request }}
  recognized-tests:
    description: "Space-separated string of the names of the tests to run. Valid values: ['all', 'ping', 'bats', 'terratest', 'readme']"
    value: ${{ steps.metadata.outputs.recognized-tests }}
  unrecognized-tests:
    description: "Space-separated string of the names of the tests that were requested but are not supported"
    value: ${{ steps.metadata.outputs.unrecognized-tests }}
  valid-run-request:
    description: "Boolean string. Indicating whether the calling event was a proper /run request."
    value: ${{ steps.metadata.outputs.valid-run-request }}
  recognized-runs:
    description: "Space-separated string of the names of the runs to execute. Valid values: ['all', 'rebuild-readme', 'terraform-fmt']"
    value: ${{ steps.metadata.outputs.recognized-runs }}
  unrecognized-runs:
    description: "Space-separated string of the names of the runs that were requested but are not supported"
    value: ${{ steps.metadata.outputs.unrecognized-runs }}
runs:
  using: "composite"
  steps:
    - name: "Determine Event Type"
      id: event-type
      uses: actions/github-script@v4
      with:
        script: |
          if (context.payload.pull_request) {
            core.setOutput("event-type", "pull-request")
          } else if (context.payload.issue) {
            core.setOutput("event-type", "chatops")
          }

    - name: "Get metadata pull request"
      id: metadata-pull-request
      uses: actions/github-script@v4
      if: steps.event-type.outputs.event-type == 'pull-request'
      with:
        script: |
          // extract the SHA of the commit at the head of the PR
          let headSha = context.payload.pull_request.head.sha
          core.setOutput("pr-sha", headSha);

          // extract the base branch name that's being merged into
          let prBaseRef = context.payload.pull_request.base.ref;
          core.setOutput("pr-base-ref", prBaseRef);

          // extract the labels attached to this PR
          let prLabels = context.payload.pull_request.labels;
          core.setOutput("pr-labels", prLabels);

          // run all tests by default
          // #const validTests = ['all', 'ping', 'bats', 'terratest', 'readme']
          let testNames = "all"
          //core.setOutput("tests-names", testNames)
          core.setOutput("valid-test-request", "true")
          core.setOutput("recognized-tests", testNames)
          core.setOutput("unrecognized-tests", "")

    - name: "Get metadata chatops"
      id: metadata-chatops
      uses: actions/github-script@v4
      if: steps.event-type.outputs.event-type == 'chatops'
      with:
        script: |
          // extract the SHA of the commit at the head of the PR
          const prUrl = context.payload.issue.pull_request.url;
          const prDetails = await github.request(`GET ${prUrl}`);
          let headSha = prDetails.data.head.sha;
          core.setOutput("pr-sha", headSha);

          // extract the base branch name that's being merged into
          let prBaseRef = prDetails.data.base.ref;
          core.setOutput("pr-base-ref", prBaseRef);

          // extract the labels attached to this PR
          let prLabels = prDetails.data.labels;
          core.setOutput("pr-labels", prLabels);

          // prepare to extract the name(s) of the /run or /test suite(s) to be executed
          const commentBody = context.payload.comment.body;
          console.log("commentBody: " + commentBody)
          // evaluate run regex
          const validRuns = ['all', 'rebuild-readme', 'terraform-fmt']
          const runRegex = /^\/run( .+)\s*$/;
          runMatches = commentBody.match(runRegex);
          // evaluate test regex
          const validTests = ['all', 'ping', 'bats', 'terratest', 'readme']
          const testRegex = /^\/test( .+)\s*$/;
          testMatches = commentBody.match(testRegex);

          // evaluate regex results
          let validRunRequest = ""
          let recognizedRuns = ""
          let unrecognizedRuns = ""
          let validTestRequest = ""
          let recognizedTests = ""
          let unrecognizedTests = ""
          if (testMatches == null) { // this indicates no /test request was found
            if (runMatches == null) { // this indicates that no /run request was found
              validTestRequest = "false"
              validRunRequest = "false"
            } else if (runMatches[1]) { // this indicates that we detected a properly-formatted /run request
              validTestRequest = "false"
              validRunRequest = "true"
              unrecognizedRuns = runMatches[1]
              validRuns.forEach(runCheck)
              unrecognizedRuns = unrecognizedRuns.replace(/\s{2,}/g," ")
              // clean up lists of runs, whether they're empty or not
              if ( !( /\S/.test(recognizedRuns) ) ) {
                recognizedRuns = ""
              } else {
                recognizedRuns = recognizedRuns.replace(/^\s*/,"")
              }
              if ( !( /\S/.test(unrecognizedRuns) ) ) {
                unrecognizedRuns = ""
              } else {
                unrecognizedRuns = unrecognizedRuns.replace(/^\s*/,"")
              }
            }
          } else if (testMatches[1]) { // this indicates that we detected a properly-formatted /test request
            // compare the regex match string against each validTest to determine which tests to run
            // any characters left in the regex match string become unrecognized tests
            validRunRequest = "false"
            validTestRequest = "true"
            unrecognizedTests = testMatches[1]
            validTests.forEach(testCheck)
            unrecognizedTests = unrecognizedTests.replace(/\s{2,}/g," ")
            // clean up lists of tests, whether they're empty or not
            if ( !( /\S/.test(recognizedTests) ) ) {
              recognizedTests = ""
            } else {
              recognizedTests = recognizedTests.replace(/^\s*/,"")
            }
            if ( !( /\S/.test(unrecognizedTests) ) ) {
              unrecognizedTests = ""
            } else {
              unrecognizedTests = unrecognizedTests.replace(/^\s*/,"")
            }
          }

          // function for test forEach loop above, checking valid test names against the string of requested tests
          function testCheck(test_name, index) {
            let testCheck = new RegExp( test_name + "(?= |$)")
            if ( unrecognizedTests.match(testCheck) ) {
              recognizedTests += test_name + " "
              unrecognizedTests = unrecognizedTests.replace(test_name,"")
            }
          }

          // function for run forEach loop above, checking valid run names against the string of requested runs
          function runCheck(run_name, index) {
            let runCheck = new RegExp( run_name + "(?= |$)")
            if ( unrecognizedRuns.match(runCheck) ) {
              recognizedRuns += run_name + " "
              unrecognizedRuns = unrecognizedRuns.replace(run_name,"")
            }
          }

          // debugging
          console.log("validRunRequest: " + validRunRequest)
          console.log("recognizedRuns: " + recognizedRuns)
          console.log("unrecognizedRuns: " + unrecognizedRuns)
          console.log("validTestRequest: " + validTestRequest)
          console.log("recognizedTests: " + recognizedTests)
          console.log("unrecognizedTests: " + unrecognizedTests)

          // outputs
          core.setOutput("valid-run-request", validRunRequest)
          core.setOutput("recognized-runs", recognizedRuns)
          core.setOutput("unrecognized-runs", unrecognizedRuns)
          core.setOutput("valid-test-request", validTestRequest)
          core.setOutput("recognized-tests", recognizedTests)
          core.setOutput("unrecognized-tests", unrecognizedTests)

    - name: "Reconcile metadata"
      id: metadata
      shell: bash -x -e -o pipefail {0}
      run: |
        # rename metadata from whichever step was used to extract it

        # pr-sha
        if [ "${{ steps.metadata-chatops.outputs.pr-sha }}" ]; then
          pr_sha=${{ steps.metadata-chatops.outputs.pr-sha }}
        elif [ "${{ steps.metadata-pull-request.outputs.pr-sha}}" ]; then
          pr_sha=${{ steps.metadata-pull-request.outputs.pr-sha }}
        fi
        echo "::set-output name=pr-sha::$pr_sha"

        # pr-base-ref
        if [ "${{ steps.metadata-chatops.outputs.pr-base-ref }}" ]; then
          pr_base_ref=${{ steps.metadata-chatops.outputs.pr-base-ref }}
        elif [ "${{ steps.metadata-pull-request.outputs.pr-base-ref}}" ]; then
          pr_base_ref=${{ steps.metadata-pull-request.outputs.pr-base-ref }}
        fi
        echo "::set-output name=pr-base-ref::$pr_base_ref"

        # pr-labels
        if [ "${{ steps.metadata-chatops.outputs.pr-labels }}" ]; then
          pr_labels=${{ steps.metadata-chatops.outputs.pr-labels }}
        elif [ "${{ steps.metadata-pull-request.outputs.pr-labels}}" ]; then
          pr_labels=${{ steps.metadata-pull-request.outputs.pr-labels }}
        fi
        echo "::set-output name=pr-labels::$pr_labels"

        # recognized-tests
        if [ "${{ steps.metadata-chatops.outputs.recognized-tests }}" ]; then
          recognized_tests="${{ steps.metadata-chatops.outputs.recognized-tests }}"
        elif [ "${{ steps.metadata-pull-request.outputs.recognized-tests}}" ]; then
          recognized_tests="${{ steps.metadata-pull-request.outputs.recognized-tests }}"
        fi
        echo "::set-output name=recognized-tests::$recognized_tests"

        # unrecognized-tests
        if [ "${{ steps.metadata-chatops.outputs.unrecognized-tests }}" ]; then
          unrecognized_tests="${{ steps.metadata-chatops.outputs.unrecognized-tests }}"
        elif [ "${{ steps.metadata-pull-request.outputs.unrecognized-tests}}" ]; then
          unrecognized_tests="${{ steps.metadata-pull-request.outputs.unrecognized-tests }}"
        fi
        echo "::set-output name=unrecognized-tests::$unrecognized_tests"

        # valid-test-request
        if [ "${{ steps.metadata-chatops.outputs.valid-test-request }}" ]; then
          valid_test_request="${{ steps.metadata-chatops.outputs.valid-test-request }}"
        elif [ "${{ steps.metadata-pull-request.outputs.valid-test-request}}" ]; then
          valid_test_request="${{ steps.metadata-pull-request.outputs.valid-test-request }}"
        fi
        echo "::set-output name=valid-test-request::$valid_test_request"

        # recognized-runs
        if [ "${{ steps.metadata-chatops.outputs.recognized-runs }}" ]; then
          recognized_runs="${{ steps.metadata-chatops.outputs.recognized-runs }}"
        else
          recognized_runs=""
        fi
        echo "::set-output name=recognized-runs::$recognized_runs"

        # unrecognized-runs
        if [ "${{ steps.metadata-chatops.outputs.unrecognized-runs }}" ]; then
          unrecognized_runs="${{ steps.metadata-chatops.outputs.unrecognized-runs }}"
        else
          unrecognized_runs=""
        fi
        echo "::set-output name=unrecognized-runs::$unrecognized_runs"

        # valid-run-request
        if [ "${{ steps.metadata-chatops.outputs.valid-run-request }}" ]; then
          valid_run_request="${{ steps.metadata-chatops.outputs.valid-run-request }}"
        else
          valid_run_request=""
        fi
        echo "::set-output name=valid-run-request::$valid_run_request"
