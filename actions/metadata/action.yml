name: 'terraform-ci-metadata'
description: 'Extract necessary metadata for test running'
outputs:
  pr-sha:
    description: "The SHA of the commit at the head of the PR"
    value: ${{ steps.metadata.outputs.pr-sha }}
  pr-base-ref:
    description: "The name of the base branch that's being merged into"
    value: ${{ steps.metadata.outputs.pr-base-ref }}
  pr-labels:
    description: "The labels attached to this PR"
    value: ${{ steps.metadata.outputs.pr-labels }}
  valid-test-request:
    description: "Boolean string. Indicating whether the calling event was a proper /test request."
    value: ${{ steps.metadata.outputs.valid-test-request }}
  recognized-tests:
    description: "Space-separated string of the names of the tests to run. Valid values: ['all', 'ping', 'bats', 'terratest', 'readme']"
    value: ${{ steps.metadata.outputs.recognized-tests }}
  unrecognized-tests:
    description: "Space-separated string of the names of the tests that were requested but are not supported"
    value: ${{ steps.metadata.outputs.unrecognized-tests }}
  valid-command-request:
    description: "Boolean string. Indicating whether the calling event was a proper /command request."
    value: ${{ steps.metadata.outputs.valid-command-request }}
  recognized-commands:
    description: "Space-separated string of the names of the commands to run. Valid values: ['all', 'rebuild-readme', 'terraform-fmt']"
    value: ${{ steps.metadata.outputs.recognized-commands }}
  unrecognized-commands:
    description: "Space-separated string of the names of the commands that were requested but are not supported"
    value: ${{ steps.metadata.outputs.unrecognized-commands }}
runs:
  using: "composite"
  steps:
    - name: "Determine Event Type"
      id: event-type
      uses: actions/github-script@v4
      with:
        script: |
          if (context.payload.pull_request) {
            core.setOutput("event-type", "pull-request")
          } else if (context.payload.issue) {
            core.setOutput("event-type", "chatops")
          }

    - name: "Get metadata pull request"
      id: metadata-pull-request
      uses: actions/github-script@v4
      if: steps.event-type.outputs.event-type == 'pull-request'
      with:
        script: |
          // extract the SHA of the commit at the head of the PR
          let headSha = context.payload.pull_request.head.sha
          core.setOutput("pr-sha", headSha);

          // extract the base branch name that's being merged into
          let prBaseRef = context.payload.pull_request.base.ref;
          core.setOutput("pr-base-ref", prBaseRef);

          // extract the labels attached to this PR
          let prLabels = context.payload.pull_request.labels;
          core.setOutput("pr-labels", prLabels);

          // run all tests by default
          // #const validTests = ['all', 'ping', 'bats', 'terratest', 'readme']
          let testNames = "all"
          //core.setOutput("tests-names", testNames)
          core.setOutput("valid-test-request", "true")
          core.setOutput("recognized-tests", testNames)
          core.setOutput("unrecognized-tests", "")

    - name: "Get metadata chatops"
      id: metadata-chatops
      uses: actions/github-script@v4
      if: steps.event-type.outputs.event-type == 'chatops'
      with:
        script: |
          // extract the SHA of the commit at the head of the PR
          const prUrl = context.payload.issue.pull_request.url;
          const prDetails = await github.request(`GET ${prUrl}`);
          let headSha = prDetails.data.head.sha;
          core.setOutput("pr-sha", headSha);

          // extract the base branch name that's being merged into
          let prBaseRef = prDetails.data.base.ref;
          core.setOutput("pr-base-ref", prBaseRef);

          // extract the labels attached to this PR
          let prLabels = prDetails.data.labels;
          core.setOutput("pr-labels", prLabels);

          // prepare to extract the name(s) of the command or test suite(s) to be run
          const commentBody = context.payload.comment.body;
          console.log(commentBody)
          // run command regex
          const validCommands = ['all', 'rebuild-readme', 'terraform-fmt']
          const commandRegex = /^\/command( .+)\s*$/;
          commandMatches = commentBody.match(commandRegex);
          // run test regex
          const validTests = ['all', 'ping', 'bats', 'terratest', 'readme']
          const testRegex = /^\/test( .+)\s*$/;
          testMatches = commentBody.match(testRegex);

          // evaluate regex results
          let validCommandRequest = ""
          let recognizedCommands = ""
          let unrecognizedCommands = ""
          let validTestRequest = ""
          let recognizedTests = ""
          let unrecognizedTests = ""
          if (testMatches == null) { // this indicates no /test command was found
            if (commandMatches == null) { // this indicates that no /command request was found
              validTestRequest = "false"
              validCommandRequest = "false"
            } else if (commandMatches[1]) { // this indicates that we detected a properly-formatted /command request
              validTestRequest = "false"
              validCommandRequest = "true"
              unrecognizedCommands = commandMatches[1]
              validTests.forEach(commandCheck)
              unrecognizedCommands = unrecognizedCommands.replace(/\s{2,}/g," ")
              // clean up lists of commands, whether they're empty or not
              if ( !( /\S/.test(recognizedCommands) ) ) {
                recognizedCommands = ""
              } else {
                recognizedCommands = recognizedCommands.replace(/^\s*/,"")
              }
              if ( !( /\S/.test(unrecognizedCommands) ) ) {
                unrecognizedCommands = ""
              } else {
                unrecognizedCommands = unrecognizedCommands.replace(/^\s*/,"")
              }
            }
          } else if (testMatches[1]) { // this indicates that we detected a properly-formatted /test request
            // compare the regex match string against each validTest to determine which tests to run
            // any characters left in the regex match string become unrecognized tests
            validCommandRequest = "false"
            validTestRequest = "true"
            unrecognizedTests = testMatches[1]
            validTests.forEach(testCheck)
            unrecognizedTests = unrecognizedTests.replace(/\s{2,}/g," ")
            // clean up lists of tests, whether they're empty or not
            if ( !( /\S/.test(recognizedTests) ) ) {
              recognizedTests = ""
            } else {
              recognizedTests = recognizedTests.replace(/^\s*/,"")
            }
            if ( !( /\S/.test(unrecognizedTests) ) ) {
              unrecognizedTests = ""
            } else {
              unrecognizedTests = unrecognizedTests.replace(/^\s*/,"")
            }
          }

          // function for test forEach loop above, checking valid test names against the string of requested tests
          function testCheck(test_name, index) {
            if ( unrecognizedTests.includes( " " + test_name + " " ) ) {
              recognizedTests += test_name + " "
              unrecognizedTests = unrecognizedTests.replace(test_name,"")
            }
          }

          // function for command forEach loop above, checking valid command names against the string of requested commands
          function commandCheck(command_name, index) {
            if ( unrecognizedCommands.includes( " " + command_name + " " ) ) {
              recognizedCommands += command_name + " "
              unrecognizedCommands = unrecognizedCommands.replace(command_name,"")
            }
          }

          // debugging
          console.log(validCommandRequest)
          console.log(recognizedCommands)
          console.log(unrecognizedCommands)
          console.log(validTestRequest)
          console.log(recognizedTests)
          console.log(unrecognizedTests)

          // outputs
          core.setOutput("valid-command-request", validCommandRequest)
          core.setOutput("recognized-commands", recognizedCommands)
          core.setOutput("unrecognized-commands", unrecognizedCommands)
          core.setOutput("valid-test-request", validTestRequest)
          core.setOutput("recognized-tests", recognizedTests)
          core.setOutput("unrecognized-tests", unrecognizedTests)

    - name: "Reconcile metadata"
      id: metadata
      shell: bash -x -e -o pipefail {0}
      run: |
        # rename metadata from whichever step was used to extract it

        # pr-sha
        if [ "${{ steps.metadata-chatops.outputs.pr-sha }}" ]; then
          pr_sha=${{ steps.metadata-chatops.outputs.pr-sha }}
        elif [ "${{ steps.metadata-pull-request.outputs.pr-sha}}" ]; then
          pr_sha=${{ steps.metadata-pull-request.outputs.pr-sha }}
        fi
        echo "::set-output name=pr-sha::$pr_sha"

        # pr-base-ref
        if [ "${{ steps.metadata-chatops.outputs.pr-base-ref }}" ]; then
          pr_base_ref=${{ steps.metadata-chatops.outputs.pr-base-ref }}
        elif [ "${{ steps.metadata-pull-request.outputs.pr-base-ref}}" ]; then
          pr_base_ref=${{ steps.metadata-pull-request.outputs.pr-base-ref }}
        fi
        echo "::set-output name=pr-base-ref::$pr_base_ref"

        # pr-labels
        if [ "${{ steps.metadata-chatops.outputs.pr-labels }}" ]; then
          pr_labels=${{ steps.metadata-chatops.outputs.pr-labels }}
        elif [ "${{ steps.metadata-pull-request.outputs.pr-labels}}" ]; then
          pr_labels=${{ steps.metadata-pull-request.outputs.pr-labels }}
        fi
        echo "::set-output name=pr-labels::$pr_labels"

        # recognized-tests
        if [ "${{ steps.metadata-chatops.outputs.recognized-tests }}" ]; then
          recognized_tests="${{ steps.metadata-chatops.outputs.recognized-tests }}"
        elif [ "${{ steps.metadata-pull-request.outputs.recognized-tests}}" ]; then
          recognized_tests="${{ steps.metadata-pull-request.outputs.recognized-tests }}"
        fi
        echo "::set-output name=recognized-tests::$recognized_tests"

        # unrecognized-tests
        if [ "${{ steps.metadata-chatops.outputs.unrecognized-tests }}" ]; then
          unrecognized_tests="${{ steps.metadata-chatops.outputs.unrecognized-tests }}"
        elif [ "${{ steps.metadata-pull-request.outputs.unrecognized-tests}}" ]; then
          unrecognized_tests="${{ steps.metadata-pull-request.outputs.unrecognized-tests }}"
        fi
        echo "::set-output name=unrecognized-tests::$unrecognized_tests"

        # valid-test-request
        if [ "${{ steps.metadata-chatops.outputs.valid-test-request }}" ]; then
          valid_test_request="${{ steps.metadata-chatops.outputs.valid-test-request }}"
        elif [ "${{ steps.metadata-pull-request.outputs.valid-test-request}}" ]; then
          valid_test_request="${{ steps.metadata-pull-request.outputs.valid-test-request }}"
        fi
        echo "::set-output name=valid-test-request::$valid_test_request"

        # recognized-commands
        if [ "${{ steps.metadata-chatops.outputs.recognized-commands }}" ]; then
          recognized_commands="${{ steps.metadata-chatops.outputs.recognized-commands }}"
        else
          recognized_commands=""
        fi
        echo "::set-output name=recognized-commands::$recognized_commands"

        # unrecognized-commands
        if [ "${{ steps.metadata-chatops.outputs.unrecognized-commands }}" ]; then
          unrecognized_commands="${{ steps.metadata-chatops.outputs.unrecognized-tests }}"
        else
          unrecognized_commands=""
        fi
        echo "::set-output name=unrecognized-commands::$unrecognized_tests"

        # valid-command-request
        if [ "${{ steps.metadata-chatops.outputs.valid-command-request }}" ]; then
          valid_command_request="${{ steps.metadata-chatops.outputs.valid-test-request }}"
        else
          valid_command_request=""
        fi
        echo "::set-output name=valid-command-request::$valid_test_request"
